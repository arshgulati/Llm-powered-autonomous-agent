# -*- coding: utf-8 -*-
"""Intellect_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wf37PJSM-H9pmZ5tz4XdCL5uSM866bYN

# **AI Engineer Assignment: Build a Multi-Tool LLM Agent**
"""

pip install -U langchain langchain-community

!pip install openai
!pip install serpapi

!pip install langchain-experimental

# LLM Agent Project: LangChain-based Multi-Tool Agent (Simulated Search Version)

#TASK 1: Agent Design
from langchain.agents import Tool
from langchain.memory import ConversationBufferMemory
from langchain_experimental.tools import PythonREPLTool
from langchain.document_loaders import TextLoader
from langchain.chains.summarize import load_summarize_chain

#TASK 4: Memory & Context Management
memory = ConversationBufferMemory(memory_key="chat_history")

#TASK 2: Tool Use Integration

def search_tool():
    return Tool(
        name="Simulated Web Search",
        func=lambda q: f"[Simulated Search Result for: {q}]",
        description="Simulates search for offline testing"
    )

def calculator_tool():
    return Tool(
        name="Calculator",
        func=lambda x: str(eval(x, {"__builtins__": {}})),
        description="Evaluates basic math expressions"
    )

def code_executor_tool():
    return PythonREPLTool()

def summarizer_tool():
    def summarize(text):
        loader = TextLoader(file_path=None, content=text)
        docs = loader.load()
        return f"Summary: {text[:100]}..."
    return Tool(
        name="Summarizer",
        func=summarize,
        description="Summarizes text or documents"
    )

#TASK 3: Prompt Engineering & Planning Logic
class MockLLM:
    def run(self, query):
        print("\n[MOCK LLM] Handling user query:", query)
        results = []

        if "Elon Musk" in query:
            results.append(search_tool().func("Elon Musk's recent companies"))
            results.append(search_tool().func("Elon Musk's net worth 2023"))
            results.append(search_tool().func("Elon Musk's net worth 2024"))
            results.append(calculator_tool().func("(240 - 180) / 180 * 100"))
        else:
            results.append("[MockLLM]: No specific logic for this input.")

        return "\n".join(results)

#TASK 1 (continued): Agent Simulation
tools = [
    search_tool(),
    calculator_tool(),
    code_executor_tool(),
    summarizer_tool()
]

mock_llm = MockLLM()

#TASK 5: Evaluation Suite (Example Run)

if __name__ == '__main__':
    query = "Find Elon Musk's recent companies and calculate how his net worth changed."
    try:
        response = mock_llm.run(query)
        print("\nFinal Response:\n", response)
    except Exception as e:
        print("\nAgent failed with error:\n", str(e))